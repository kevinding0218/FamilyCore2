---------------------------
Create new repository on my github and name it "HomeAssist"
--------------------------------------------------
cd..
--Tell Git who you are
$ git config --global user.name "Drexolo"
$ git config --global user.email kevinding0218@gmail.com
--------------------------------------------------
--Create a new local repository	
$ git init
$ cd .git
--------------------------------------------------
--Connect to a remote repository
--If you haven't connected your local repository to a remote server, add the server to be able to push to it:
$ git remote add origin https://github.com/kevinding0218/HomeAssist.git
--List all currently configured remote repositories:	
$ git remote -v
--------------------------------------------------
--Add files	
--Add one or more files to staging (index):
$ git add <filename>
$ git add *
--------------------------------------------------
--Commit
--Commit changes to head (but not yet to the remote repository)
$ git commit -m "Commit message"
--Commit any files you've added with git add, and also commit any files you've changed since then:
$ git commit -a
--------------------------------------------------
--Status	
--List the files you've changed and those you still need to add or commit
$ git status
--------------------------------------------------
--Push/Check In
--Send changes to the master branch of your remote repository:
$ git push origin master
--------------------------------------------------
--Check out from github to local repository
$ git checkout master
--Pull/Check out a repository
--Create a working copy of a local repository:
$ git clone /path/to/repository
--For a remote server, use:
$ git clone username@host:/path/to/repository
--------------------------------------------------
--Update from the remote repository/Check out
--Fetch and merge changes on the remote server to your working directory:
$ git pull
--------------------------------------------------
--To merge a different branch into your active branch:
$ git merge <branchname>
--Undo local changes
--If you mess up, you can replace the changes in your working tree with the last content in head:
Changes already added to the index, as well as new files, will be kept.
$ git checkout -- <filename>
--Instead, to drop all your local changes and commits, fetch the latest history from the server and point your local master branch at it, do this:
$ git fetch origin
$git reset --hard origin/master
--------------------------------------------------
--Branches
--Create a new branch and switch to it:
$ git checkout -b <branchname>
--Switch from one branch to another:
$ git checkout <branchname>
--List all the branches in your repo, and also tell you what branch you're currently in:
$ git branch
--Delete the feature branch:
$ git branch -d <branchname>
--Push the branch to your remote repository, so others can use it:
$ git push origin <branchname>
--Push all branches to your remote repository:
$ git push --all origin
--Delete a branch on your remote repository:
$ git push origin :<branchname>
--------------------------------------------------
For example:
1. When add/update file in local repository(Check in new file)
$ git add * or git add <filename>
$ git commit -m "Commit Message"
$ git push origin master or just "git push"
2. When server file is updated(Check out from server)
$ git pull